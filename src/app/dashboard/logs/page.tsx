import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from '@/components/ui/card';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Separator } from '@/components/ui/separator';
import { getCurrentUser } from '@/lib/auth';
import type { User, Log, Task } from '@/types';
import { getAllUsers, getAllTasks, getAllLogs } from '@/lib/data';
import { getSubordinates } from '@/lib/hierarchy';


export default async function LogsPage() {
  const currentUser = await getCurrentUser();
  if (!currentUser) return null;

  const users = await getAllUsers();
  const tasks = await getAllTasks();
  const allLogs = await getAllLogs();

  const getVisibleLogs = async (): Promise<Log[]> => {
    const userRole = currentUser.role;

    if (userRole === 'Co-founder' || userRole === 'Secretary') {
      return allLogs;
    }

    const subordinateIds = await getSubordinates(currentUser.id, users);
    const visibleUserIds = new Set([currentUser.id, ...subordinateIds]);

    const visibleLogs = allLogs.filter(log => {
        // Show logs created by the user or their subordinates
        if (visibleUserIds.has(log.userId)) {
            return true;
        }

        // Handle notifications about announcements, which don't have a taskId
        // and should be visible if the announcement itself is visible.
        if (log.message.toLowerCase().includes('announcement')) {
            // This is a simple check; a more robust system might link logs to announcements.
            // For now, we assume all announcement logs are broadly relevant if not generated by a hidden user.
            return true;
        }

        // For other logs, if not by a visible user, we don't show them.
        return false;
    });

    return visibleLogs;
  };

  const filteredLogs = await getVisibleLogs();


  const enrichedLogs = filteredLogs
    .map(log => {
      const user = users.find(u => u.id === log.userId);
      return {
        ...log,
        userName: user?.name || 'System',
        userAvatar: user?.avatar,
      };
    })
    .sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());

  return (
    <Card>
      <CardHeader>
        <CardTitle>Activity Logs</CardTitle>
        <CardDescription>
          A history of relevant actions and updates based on your role.
        </CardDescription>
      </CardHeader>
      <CardContent>
        <ScrollArea className="h-[60vh]">
          <div className="space-y-4">
            {enrichedLogs.map((log, index) => (
              <div key={log.id}>
                <div className="flex items-start gap-4 p-4">
                    <Avatar className="h-10 w-10">
                    <AvatarImage src={log.userAvatar} alt={log.userName} />
                    <AvatarFallback>
                        {log.userName.split(' ').map(n => n[0]).join('')}
                    </AvatarFallback>
                    </Avatar>
                    <div className="flex-1 space-y-1">
                    <div className="flex items-center justify-between">
                        <p className="font-semibold">{log.userName}</p>
                        <p className="text-xs text-muted-foreground">
                        {new Date(log.timestamp).toLocaleString()}
                        </p>
                    </div>
                    <p className="text-sm text-muted-foreground" dangerouslySetInnerHTML={{ __html: log.message }} />
                    </div>
                </div>
                {index < enrichedLogs.length - 1 && <Separator />}
              </div>
            ))}
             {enrichedLogs.length === 0 && (
                <div className="flex items-center justify-center h-40 text-muted-foreground">
                    No logs to display.
                </div>
            )}
          </div>
        </ScrollArea>
      </CardContent>
    </Card>
  );
}
